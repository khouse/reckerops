Description: Basic Public EC2 Network for Kitchen Builds


Parameters:

  VpcCidr:
    Type: String
    Description: CIDR Block for the VPC
    Default: 10.0.0.0/16

  SubnetCidr:
    Type: String
    Description: CIDR Block for the Subnet
    Default: 10.0.0.0/16

  AccessKeySerial:
    Type: String
    Description: Increment to rotate access key for user.
    Default: "0"

  LambdaBucket:
    Type: String

  LambdaKey:
    Type: String


Resources:

  User:
    Type: AWS::IAM::User
    Properties:
      UserName:
        Fn::Join: [ "-", [ { "Ref": "AWS::StackName" }, { "Ref": "AWS::Region" } ] ]
      Policies:
        - PolicyName: BuildCloudFormationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action: "cloudformation:*"
        - PolicyName: BuildEc2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action: "ec2:*"
        - PolicyName: BuildS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action: "s3:*"

  UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial:
        Ref: AccessKeySerial
      Status: Active
      UserName:
        Ref: User

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
      CidrBlock:
        Ref: VpcCidr

  Gateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
      
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: Gateway
      VpcId:
        Ref: Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc      
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId:
        Ref: Gateway
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: SubnetCidr
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  RouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: Subnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, and HTTPS from anywhere
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  SecurityGroupAllowSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: SecurityGroup
      CidrIp: 0.0.0.0/0
      FromPort: "22"
      ToPort: "22"
      IpProtocol: TCP

  SecurityGroupAllowHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: SecurityGroup
      CidrIp: 0.0.0.0/0
      FromPort: "80"
      ToPort: "80"
      IpProtocol: TCP

  SecurityGroupAllowHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: SecurityGroup
      CidrIp: 0.0.0.0/0
      FromPort: "443"
      ToPort: "443"
      IpProtocol: TCP

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleanup Orphaned Kitchen Test Runners
      Role:
        Fn::GetAtt: [ LambdaRole, Arn ]
      Code:
        S3Bucket:
          Ref: LambdaBucket
        S3Key:
          Ref: LambdaKey
      FunctionName: kitchen-cleanup
      Handler: function.handler
      Runtime: python2.7

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: BuildLambdaEc2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeInstances
                  - ec2:TerminateInstances


Outputs:

  AccessKeyId:
    Description: AWS_ACCESS_KEY_ID
    Value:
      Ref: UserAccessKey
      
  AccessKeySecret:
    Description: AWS_SECRET_ACCESS_KEY
    Value:
      Fn::GetAtt:
        - UserAccessKey
        - SecretAccessKey
